#!/usr/bin/env python3
"""
Script to collect all verbs with multiple dhatu_ids from the generated JSON file.
Creates TWO YAML files - one for verbs without gati, one for verbs with gati.

Location: Scripts/AI_Generated/scripts/collectMultipleDhatuIds.py

Usage (from project root):
    python3 Scripts/AI_Generated/scripts/collectMultipleDhatuIds.py \\
        Scripts/output/AkhyataChandrika_Autogenerated.json \\
        Scripts/AI_Generated/output

According to AI_Doc.md:
- Any Verb with or without gati cannot have more than one dhatu_id
- We need to collect all such cases and create YAML files for manual correction
"""

import json
import yaml
import sys
import os
from collections import OrderedDict

# Custom YAML dumper to preserve strings and formatting
class QuotedDumper(yaml.SafeDumper):
    pass

def quoted_str_representer(dumper, data):
    return dumper.represent_scalar('tag:yaml.org,2002:str', data, style='"')

def ordered_dict_representer(dumper, data):
    return dumper.represent_dict(data.items())

yaml.add_representer(str, quoted_str_representer, Dumper=QuotedDumper)
yaml.add_representer(OrderedDict, ordered_dict_representer, Dumper=QuotedDumper)


def collect_multiple_dhatu_ids(json_file):
    """
    Scan the JSON file and collect all verbs with multiple dhatu_ids.

    Returns: Two OrderedDicts - one for verbs without gati, one for verbs with gati
    Each with structure:
    {
        "form_with_gati": {
            "dhatu_ids": "comma,separated,ids",
            "gati": "gati_value",
            "kanda": "kanda_name",
            "varga": "varga_name",
            "adhikaar": "adhikaar_value (if exists)",
            "artha": "artha_value",
            "shloka_num": "num",
            "shloka_text": "text"
        }
    }
    """
    with open(json_file, 'r', encoding='utf-8') as f:
        data = json.load(f)

    multiple_dhatu_cases_without_gati = OrderedDict()
    multiple_dhatu_cases_with_gati = OrderedDict()
    total_cases = 0
    without_gati_count = 0
    with_gati_count = 0

    # Scan through all kandas, vargas, shlokas, verbs
    for kanda in data.get('data', []):
        kanda_name = kanda.get('kanda_name')

        # Skip ‡§®‡§æ‡§®‡§æ‡§∞‡•ç‡§•‡§µ‡§∞‡•ç‡§ó‡§É as per user requirement
        if '‡§®‡§æ‡§®‡§æ‡§∞‡•ç‡§•‡§µ‡§∞‡•ç‡§ó‡§É' in kanda_name:
            continue

        for varga in kanda.get('vargas', []):
            varga_name = varga.get('varga_name')

            # Skip ‡§®‡§æ‡§®‡§æ‡§∞‡•ç‡§•‡§µ‡§∞‡•ç‡§ó‡§É as per user requirement
            if '‡§®‡§æ‡§®‡§æ‡§∞‡•ç‡§•‡§µ‡§∞‡•ç‡§ó‡§É' in varga_name:
                print(f"‚è≠Ô∏è  Skipping: {varga_name}")
                continue

            for shloka in varga.get('shlokas', []):
                shloka_num = shloka.get('num')
                shloka_text = shloka.get('text')
                adhikaar = shloka.get('adhikaar', '')

                for verb_block in shloka.get('verbs', []):
                    artha = verb_block.get('artha')

                    for entry in verb_block.get('entries', []):
                        form = entry.get('form')
                        dhatu_id = entry.get('dhatu_id', '')
                        gati = entry.get('gati', '')

                        # Check if this entry has multiple dhatu_ids
                        if '(More than one)' in dhatu_id:
                            # Remove the "(More than one)" suffix to get clean IDs
                            clean_dhatu_ids = dhatu_id.replace(' (More than one)', '').strip()

                            # Create entry data
                            entry_data = OrderedDict([
                                ('form', form),
                                ('dhatu_ids', clean_dhatu_ids),
                                ('gati', gati),
                                ('kanda', kanda_name),
                                ('varga', varga_name),
                                ('adhikaar', adhikaar),
                                ('artha', artha),
                                ('shloka_num', shloka_num),
                                ('shloka_text', shloka_text)
                            ])

                            # Separate into two collections based on whether gati exists
                            if gati and gati.strip():
                                # Has gati
                                key = f"{form} (with gati: {gati})"
                                multiple_dhatu_cases_with_gati[key] = entry_data
                                with_gati_count += 1
                                print(f"Found (with gati): {key} ‚Üí {clean_dhatu_ids}")
                            else:
                                # No gati
                                key = form
                                multiple_dhatu_cases_without_gati[key] = entry_data
                                without_gati_count += 1
                                print(f"Found (without gati): {key} ‚Üí {clean_dhatu_ids}")

                            total_cases += 1

    print(f"\n{'='*60}")
    print(f"‚úÖ Found {total_cases} cases with multiple dhatu_ids")
    print(f"  - Without gati: {without_gati_count}")
    print(f"  - With gati: {with_gati_count}")
    print(f"{'='*60}")

    return multiple_dhatu_cases_without_gati, multiple_dhatu_cases_with_gati


def write_yaml_file(yaml_file, data, file_type=""):
    """Write YAML data to file with proper formatting"""
    with open(yaml_file, 'w', encoding='utf-8') as f:
        # Add header comment
        f.write(f"# Cases where a verb has more than one dhatu_id ({file_type})\n")
        f.write(f"# Total items: {len(data)}\n")
        f.write("# Format: Each entry shows the verb form with its multiple dhatu_ids\n")
        f.write("# Manually edit this file to select the correct dhatu_id for each case\n")
        f.write("# After editing, run the backport script to sync changes back to original YAML files\n\n")

        yaml.dump(
            data,
            f,
            allow_unicode=True,
            default_flow_style=False,
            indent=2,
            sort_keys=False,
            width=1000,
            Dumper=QuotedDumper
        )


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python3 Scripts/AI_Generated/scripts/collectMultipleDhatuIds.py <json_file> <output_dir>")
        print("\nExample (from project root):")
        print("  python3 Scripts/AI_Generated/scripts/collectMultipleDhatuIds.py \\")
        print("      Scripts/output/AkhyataChandrika_Autogenerated.json \\")
        print("      Scripts/AI_Generated/output")
        print("\nThis will create two files:")
        print("  - Scripts/AI_Generated/output/multiple_dhatu_ids_without_gati.yaml")
        print("  - Scripts/AI_Generated/output/multiple_dhatu_ids_with_gati.yaml")
        sys.exit(1)

    json_file = sys.argv[1]
    output_dir = sys.argv[2]

    if not os.path.exists(json_file):
        print(f"‚ùå Error: JSON file not found: {json_file}")
        sys.exit(1)

    if not os.path.exists(output_dir):
        print(f"‚ùå Error: Output directory not found: {output_dir}")
        sys.exit(1)

    # Define output file paths
    output_without_gati = os.path.join(output_dir, "multiple_dhatu_ids_without_gati.yaml")
    output_with_gati = os.path.join(output_dir, "multiple_dhatu_ids_with_gati.yaml")

    print(f"üìö Loading JSON from {json_file}...")
    cases_without_gati, cases_with_gati = collect_multiple_dhatu_ids(json_file)

    print(f"\nüìù Writing YAML files to {output_dir}...")

    # Write file for verbs without gati
    print(f"\n  Writing {output_without_gati}...")
    write_yaml_file(output_without_gati, cases_without_gati, "verbs WITHOUT gati")
    print(f"  ‚úÖ Created: {output_without_gati} ({len(cases_without_gati)} entries)")

    # Write file for verbs with gati
    print(f"\n  Writing {output_with_gati}...")
    write_yaml_file(output_with_gati, cases_with_gati, "verbs WITH gati")
    print(f"  ‚úÖ Created: {output_with_gati} ({len(cases_with_gati)} entries)")

    print(f"\n{'='*60}")
    print(f"‚úÖ Complete! Created 2 YAML files:")
    print(f"  1. {output_without_gati}")
    print(f"  2. {output_with_gati}")
    print(f"{'='*60}")
