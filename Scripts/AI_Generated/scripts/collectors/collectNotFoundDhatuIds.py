#!/usr/bin/env python3
"""
Script to collect all verbs where dhatu_id is "Not Found" from the generated JSON file.
Creates ONE YAML file for verbs without gati only.

Location: Scripts/AI_Generated/scripts/collectors/collectNotFoundDhatuIds.py

Usage (from project root):
    python3 Scripts/AI_Generated/scripts/collectors/collectNotFoundDhatuIds.py \\
        Scripts/output/AkhyataChandrika_Autogenerated.json \\
        Scripts/AI_Generated/output

According to requirements:
- Some verbs don't have a dhatu_id assigned (marked as "Not Found")
- We need to collect all such cases and create YAML files for manual correction
- Users can then add the correct dhatu_id for these verbs
- Note: Verbs with gati that have "Not Found" dhatu_id are rare and currently 0 entries
"""

import json
import yaml
import sys
import os
from collections import OrderedDict

# Custom YAML dumper to preserve strings and formatting
class QuotedDumper(yaml.SafeDumper):
    pass

def quoted_str_representer(dumper, data):
    return dumper.represent_scalar('tag:yaml.org,2002:str', data, style='"')

def ordered_dict_representer(dumper, data):
    return dumper.represent_dict(data.items())

yaml.add_representer(str, quoted_str_representer, Dumper=QuotedDumper)
yaml.add_representer(OrderedDict, ordered_dict_representer, Dumper=QuotedDumper)


def collect_not_found_dhatu_ids(json_file):
    """
    Scan the JSON file and collect all verbs where dhatu_id is "Not Found".

    Returns: OrderedDict for verbs without gati
    Structure:
    {
        "form": {
            "dhatu_id": "Not Found",
            "gati": "",
            "kanda": "kanda_name",
            "varga": "varga_name",
            "adhikaar": "adhikaar_value (if exists)",
            "artha": "artha_value",
            "shloka_num": "num",
            "shloka_text": "text"
        }
    }
    """
    with open(json_file, 'r', encoding='utf-8') as f:
        data = json.load(f)

    not_found_cases_without_gati = OrderedDict()
    total_cases = 0
    without_gati_count = 0
    with_gati_count = 0

    # Scan through all kandas, vargas, shlokas, verbs
    for kanda in data.get('data', []):
        kanda_name = kanda.get('kanda_name')

        # Skip ‡§®‡§æ‡§®‡§æ‡§∞‡•ç‡§•‡§µ‡§∞‡•ç‡§ó‡§É as per user requirement
        if '‡§®‡§æ‡§®‡§æ‡§∞‡•ç‡§•‡§µ‡§∞‡•ç‡§ó‡§É' in kanda_name:
            continue

        for varga in kanda.get('vargas', []):
            varga_name = varga.get('varga_name')

            # Skip ‡§®‡§æ‡§®‡§æ‡§∞‡•ç‡§•‡§µ‡§∞‡•ç‡§ó‡§É as per user requirement
            if '‡§®‡§æ‡§®‡§æ‡§∞‡•ç‡§•‡§µ‡§∞‡•ç‡§ó‡§É' in varga_name:
                print(f"‚è≠Ô∏è  Skipping: {varga_name}")
                continue

            for shloka in varga.get('shlokas', []):
                shloka_num = shloka.get('num')
                shloka_text = shloka.get('text')
                adhikaar = shloka.get('adhikaar', '')

                for verb_block in shloka.get('verbs', []):
                    artha = verb_block.get('artha')

                    for entry in verb_block.get('entries', []):
                        form = entry.get('form')
                        dhatu_id = entry.get('dhatu_id', '')
                        gati = entry.get('gati', '')

                        # Check if dhatu_id is "Not Found"
                        if dhatu_id == "Not Found":
                            # Only process verbs WITHOUT gati
                            if not gati or not gati.strip():
                                # Create entry data
                                entry_data = OrderedDict([
                                    ('form', form),
                                    ('dhatu_id', dhatu_id),
                                    ('gati', gati),
                                    ('kanda', kanda_name),
                                    ('varga', varga_name),
                                    ('adhikaar', adhikaar),
                                    ('artha', artha),
                                    ('shloka_num', shloka_num),
                                    ('shloka_text', shloka_text)
                                ])

                                key = form
                                not_found_cases_without_gati[key] = entry_data
                                without_gati_count += 1
                                print(f"Found (without gati): {key}")
                                total_cases += 1
                            else:
                                # Has gati - skip and just count
                                with_gati_count += 1
                                print(f"Skipping (with gati): {form} (with gati: {gati})")

    print(f"\n{'='*60}")
    print(f"‚úÖ Found {total_cases} cases with 'Not Found' dhatu_id (without gati)")
    if with_gati_count > 0:
        print(f"‚ö†Ô∏è  Skipped {with_gati_count} cases with gati (not generating file)")
    print(f"{'='*60}")

    return not_found_cases_without_gati


def write_yaml_file(yaml_file, data, file_type=""):
    """Write YAML data to file with proper formatting"""
    with open(yaml_file, 'w', encoding='utf-8') as f:
        # Add header comment
        f.write(f"# Cases where a verb has 'Not Found' dhatu_id ({file_type})\n")
        f.write(f"# Total items: {len(data)}\n")
        f.write("# Format: Each entry shows the verb form that needs a dhatu_id assigned\n")
        f.write("# Manually edit this file to add the correct dhatu_id for each case\n")
        f.write("# After editing, run the backport script to sync changes back to original YAML files\n")
        f.write("#\n")
        f.write("# Instructions:\n")
        f.write("#   1. Find the correct dhatu_id for each verb\n")
        f.write("#   2. Change dhatu_id from 'Not Found' to the correct ID (e.g., '01.0594')\n")
        f.write("#   3. Keep the gati field as is (don't modify it)\n")
        f.write("#   4. Run backport script to apply changes\n\n")

        yaml.dump(
            data,
            f,
            allow_unicode=True,
            default_flow_style=False,
            indent=2,
            sort_keys=False,
            width=1000,
            Dumper=QuotedDumper
        )


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python3 Scripts/AI_Generated/scripts/collectors/collectNotFoundDhatuIds.py <json_file> <output_dir>")
        print("\nExample (from project root):")
        print("  python3 Scripts/AI_Generated/scripts/collectors/collectNotFoundDhatuIds.py \\")
        print("      Scripts/output/AkhyataChandrika_Autogenerated.json \\")
        print("      Scripts/AI_Generated/output")
        print("\nThis will create one file:")
        print("  - Scripts/AI_Generated/output/not_found_dhatu_ids_without_gati.yaml")
        sys.exit(1)

    json_file = sys.argv[1]
    output_dir = sys.argv[2]

    if not os.path.exists(json_file):
        print(f"‚ùå Error: JSON file not found: {json_file}")
        sys.exit(1)

    if not os.path.exists(output_dir):
        print(f"‚ùå Error: Output directory not found: {output_dir}")
        sys.exit(1)

    # Define output file path
    output_without_gati = os.path.join(output_dir, "not_found_dhatu_ids_without_gati.yaml")

    print(f"üìö Loading JSON from {json_file}...")
    cases_without_gati = collect_not_found_dhatu_ids(json_file)

    print(f"\nüìù Writing YAML file to {output_dir}...")

    # Write file for verbs without gati
    print(f"\n  Writing {output_without_gati}...")
    write_yaml_file(output_without_gati, cases_without_gati, "verbs WITHOUT gati")
    print(f"  ‚úÖ Created: {output_without_gati} ({len(cases_without_gati)} entries)")

    print(f"\n{'='*60}")
    print(f"‚úÖ Complete! Created YAML file:")
    print(f"  {output_without_gati}")
    print(f"{'='*60}")
